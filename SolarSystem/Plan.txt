=====================================IN THIS COMMIT=====================================
Working on conversion to 3D Part III
 - removed physicsUnits namespace
 - added Ratio class, but may be overkill for now, so commented it out
========================================IMPLEMENTING PLAN========================================

Remarks:
	Acknowledge third parties in documentation.
	Well, reorganize documentation.
		- probably not worth the effort.
		- but moving user guide to beggining is doable.
	Resolve speeding/slowing down while recording.
		- won't be easy - either we loose O(1) search in file or we get wrong replaying speed
			- went for wrong replaying speed for now
TODOs/IDEAS:
	Add Inverses of matrices in UBO in camera class if needed.
	Why is Ortho weirdly clipped when projecting to the center?
		- now projecting to near clipping plane, need to resolve it there's typo or bug in matrices somewhere.

	Two forms of zooming???
		- forward movement - moves camera and its target in view direction
		- zooming to target - moves camera closer to its target pos(needs lower bound=maxZoom)
		- Go to two-button setup with ALT?
			- left Trackball, altLeft 1st person cam(instead of middleButton)
			- scroll zoom to target, altScroll forward movement
			- right,altRight moves to sides
	Decide on Ratio class
		- too much work with operators, but i distinguishes it from simple double
Plan:
	Design and implemented unit system
		- simData also contains in which units the data are.
		- ability to convert between units in run-time
		- supported units
			- distance: meters, kilometers, AU
			- time: seconds, minute, hours, days, years
			- mass: kg, earthMass, sunMass
		- general ratio class
		- Factory functions for supported units
		- conversion for values
		- unitSystem to convert whole Unit
	UI overhaul:
		- Top-bar with dropdown windows
			- SimControls
				- just current SimControls
				- usage statistics
				- save/load/restart
				- name of current simMethod?
				- tickbox for break on collision?
				- graph of frameTime,FPS?
					- with stability line
			- SimData
				- Big window
				- choose reference frame and units
				- Tabs:
					- List of all simulated objects
						- with name, color, mass, position, distance, velocity, speed
							- ability to change them ( in stopped sim only?)
						- select on click( higlights it in view), ability to focus it
						- show/hide
						- stop tracking?
							- would store any addition data per untracked objects. Just draw them as points without trails and any visual guidance
								- perhaps show in specific colour(gray)
							- for many-body simulations where individual objects don't matter
					- Graphs
						- conservation of energy
						- pos, dist, vel, speed
			- CameraControls
				- pos, targetPos, upDir
					- with ability to set 
				- zoom, panning speed, (maybe trackbal rot speed for finer control)
				- Controls explained, maybe dynamic button and key mapping
				- status - free or following something
			- Visuals
				- maybe together with CameraControls
				- controls visual guidances:
					- grid with dynamic resolution (located at ref frame with selected units)
						- individual grid planes as well as 3D grid
						- ability to switch parts of it on/off, maybe change colors
					- pinheads with planets = projection on xz grid
						- ability to switch on/of, choose plane of projection
					- visual trackball - make it smaller to allow easier rolling
						- change size, position? (But keep it in screen coords)
					- camTarget indicator
					- UI for object
						- shows name of hover
						- when selected(on click) shows small window
							- Name, set as target(follow), set as ref frame
	Bonuses:
		Kepler with all trajectories
			- would require hiearchy system in simData and input files
				- wouldn't be too hard
		Dynamic addition of objects
			- could be done for stopped simulation
				- would require viewer, simMethods and parser respond to these changes
					- probably SystemUnit::UnitAdded/Removed(index) would be fine
		Make Planets colored spheres
		And add shading with sun as lightsource
			- per-pixel, bloom
		OpenGL state machine - OpenGLSM
			- maybe little bit of overkill for now

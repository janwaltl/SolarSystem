=====================================IN THIS COMMIT=====================================
Refactoring - gave SimMethod and Viewer implicit simData pointer. It is initialized by _Prepare method.
					- which is called by Simulation itself.
			- Operators() and Prepare() now dont need to have data beiing passed as argument, because it is 
				accessible by member pointer to simData;
========================================IMPLEMENTING PLAN========================================
Next:
	II.List the Units in left window. Allow following them.
	III. Show some metrics.
			- SimTime, DTime, current speed.
			- allow measuring distances between Units
	IV. Make it prettier
		- linear interpolation for rendering.
		- add trails behind Units
		- maybe add grid for better orientation, but make it optional
	V. Document it & ship it
		- Write all the comments, probably v èeštinì
		- Constants instead of magic values
		- SORT all compile warnings

- About OpenGL
	- Buffers - 
	- There should be circles for each planet, they need to be moving
		- So, fixed VBO for them, reused by each unit
			- would store circle
			- color and position would be controlled by uniforms
	- There should be line trails behind the planets
		- Lets say 50 line segments for each unit
		- Sort of queue like system that would push old lines out and new lines in

SystemUnit is starting to have too many forwarding functions. Maybe give direct pointer to sim, but someway restrict
calling Start.
========================================THOUGHTS========================================

Controlling the simulation
	- By viewer - ability to Stop(End), Pause the simulation as well controlling its speed
					- Pause = just render
	Speed Control
		- DT - time step - to stay deterministic
		- accumulator - tries to make simulation real-time by multiple calls to simMethod with dt
						- in the end N.dt should match elapsed real time
		- speed can be changed by:
			1. increasing DT - takes bigger steps
							- well, it doesnt speed up anythings, just roughens or smoothens the simulation
							- big DT can lead to explosion, chaos, the end
			2. decrement acc by non-one multiple of DT
						- that would speed it up if multiple<1
							- for 1/2, it would simulate two seconds for each real-world-one
						- slow down if multiple>1
							- for 2 it would simulate one second for each 2 real-world-ones
						= but it does it at expense of CPU time, becuase m=1/2 would loop 2times more than default
							- so it might quickly get bottlenecked
			3. pass multiples of DT into SimMethod
						- that would speed it up at the expense of precision
						- basically it would take bigger leaps, but not trying to catch up to real world
						- m=60, for each DT siMethod would acts as 60DT was passed
							- so, for each real/world second, it would simulate one minute
						- m is conversion ratio between real-world time and simulated-time
							- for m=60*60*24 each second would be one day.
							- But simulation might be able to handle it, might result in explosions...
		- good speed control would employ all two(three).
			- Probably keep DT constant - everything can be achieved by other two.
			- and to speed up simulation it would do more loops(2,m<1). If it could not handle it(acc>0.5),
				it would instead multiply DT(2) and revert 2. Thus loosing bit of precision
			- That's exactly how transmission works, probably.

	- In cases where Viewer takes so much time, it can be configured so it is called only so many times a second.
		Because calling it fewer times does not break simulation, only slows responsivnes and "precision of viewing".

========================================Documentation's Draft========================================
Uživatel
- README navod jak program použít
	- komentáø na formát vstupu
	- komentáø k uživatelskému rozhraní
	- odkázat na popis ostatních implementovaných modulù
	- Exception class
Programátor
- Krátký popis použitých knihoven IMGUI, GLFW
- Komentáøe na alogirtmy
	- timeLoop - zmínit chrono?
	- virtual methods, interface
		- že je složen z 3 modulù - Parser,SimMethod,Viewer
	- Popis modulù k èemu slouží, co musejí implementovat
		- Popis jednotlivých implementovaných modulù
			- FormatteFileParser, RK4 probably, IMGUIViewer
	
- Jak program rozšíøit
 - popsáno asi u modulù